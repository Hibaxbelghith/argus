#!/usr/bin/env python
"""
Script de test rapide pour v√©rifier la configuration Twilio
Avant d'ex√©cuter ce script, assurez-vous d'avoir un num√©ro de t√©l√©phone Twilio configur√©!
"""

import os
import django

# Configurer Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'argus.settings')
django.setup()

from django.conf import settings

def test_twilio_configuration():
    """V√©rifie que Twilio est correctement configur√©"""
    
    print("\n" + "="*60)
    print("üîç V√âRIFICATION CONFIGURATION TWILIO")
    print("="*60 + "\n")
    
    # V√©rifier les credentials
    account_sid = settings.TWILIO_ACCOUNT_SID
    auth_token = settings.TWILIO_AUTH_TOKEN
    phone_number = settings.TWILIO_PHONE_NUMBER
    
    if not account_sid:
        print("‚ùå TWILIO_ACCOUNT_SID manquant!")
        return False
    
    if not auth_token:
        print("‚ùå TWILIO_AUTH_TOKEN manquant!")
        return False
    
    if not phone_number:
        print("‚ö†Ô∏è  TWILIO_PHONE_NUMBER non configur√© (vous devrez l'ajouter)")
        print("   Allez sur https://console.twilio.com/us1/develop/phone-numbers/manage/incoming")
        print("   pour obtenir votre num√©ro Twilio")
    
    print("‚úÖ Account SID:", account_sid[:10] + "..." + account_sid[-4:])
    print("‚úÖ Auth Token:", auth_token[:4] + "..." + auth_token[-4:])
    
    if phone_number:
        print("‚úÖ Phone Number:", phone_number)
    
    # Tester la connexion Twilio
    try:
        from twilio.rest import Client
        
        print("\nüìû Test de connexion √† Twilio...")
        client = Client(account_sid, auth_token)
        
        # R√©cup√©rer les informations du compte
        account = client.api.accounts(account_sid).fetch()
        print(f"‚úÖ Connexion r√©ussie!")
        print(f"   Nom du compte: {account.friendly_name}")
        print(f"   Statut: {account.status}")
        
        # R√©cup√©rer les num√©ros de t√©l√©phone
        print("\nüì± Num√©ros Twilio disponibles:")
        incoming_numbers = client.incoming_phone_numbers.list(limit=10)
        
        if not incoming_numbers:
            print("   ‚ö†Ô∏è  Aucun num√©ro trouv√©! Vous devez:")
            print("   1. Aller sur https://console.twilio.com/us1/develop/phone-numbers/manage/incoming")
            print("   2. Cliquer 'Buy a number' (avec votre cr√©dit gratuit)")
            print("   3. Ajouter le num√©ro dans votre fichier .env")
        else:
            for number in incoming_numbers:
                print(f"   ‚Ä¢ {number.phone_number} ({number.friendly_name})")
                if not phone_number:
                    print(f"     ‚Üí Ajoutez ce num√©ro dans .env: TWILIO_PHONE_NUMBER={number.phone_number}")
        
        # V√©rifier le solde
        print("\nüí∞ Solde du compte:")
        balance = client.balance.fetch()
        print(f"   Devise: {balance.currency}")
        print(f"   Montant: {balance.balance}")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå Erreur de connexion Twilio:")
        print(f"   {str(e)}")
        return False

def send_test_sms():
    """Envoie un SMS de test"""
    
    phone_number = settings.TWILIO_PHONE_NUMBER
    
    if not phone_number:
        print("\n‚ö†Ô∏è  Configurez d'abord TWILIO_PHONE_NUMBER dans .env")
        return
    
    print("\n" + "="*60)
    print("üì§ ENVOI D'UN SMS DE TEST")
    print("="*60 + "\n")
    
    # Demander le num√©ro destinataire
    to_number = input("Entrez le num√©ro destinataire (format E.164, ex: +33612345678): ").strip()
    
    if not to_number:
        print("‚ùå Num√©ro invalide")
        return
    
    try:
        from twilio.rest import Client
        
        client = Client(settings.TWILIO_ACCOUNT_SID, settings.TWILIO_AUTH_TOKEN)
        
        message = client.messages.create(
            body="üö® Test SMS depuis Argus Security System! Votre syst√®me de surveillance est op√©rationnel.",
            from_=phone_number,
            to=to_number
        )
        
        print(f"‚úÖ SMS envoy√© avec succ√®s!")
        print(f"   Message SID: {message.sid}")
        print(f"   Statut: {message.status}")
        print(f"   De: {message.from_}")
        print(f"   Vers: {message.to}")
        print(f"   Prix: {message.price} {message.price_unit}")
        
    except Exception as e:
        print(f"\n‚ùå Erreur d'envoi SMS:")
        print(f"   {str(e)}")

if __name__ == "__main__":
    print("\nüîê ARGUS SECURITY - TEST TWILIO SMS\n")
    
    # Test de configuration
    if test_twilio_configuration():
        print("\n" + "="*60)
        
        choice = input("\nVoulez-vous envoyer un SMS de test? (o/n): ").lower().strip()
        
        if choice == 'o':
            send_test_sms()
        else:
            print("\n‚úÖ Configuration v√©rifi√©e avec succ√®s!")
    else:
        print("\n‚ùå Veuillez corriger la configuration avant de continuer.")
    
    print("\n" + "="*60)
    print("‚úÖ Test termin√©!")
    print("="*60 + "\n")
