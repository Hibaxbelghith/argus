#!/usr/bin/env python
"""
Script rapide pour g√©n√©rer des recommandations IA
Usage: py generate_ai_recommendations.py
"""
import os
import django

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'argus.settings')
django.setup()

from analytics.ai_recommendation_system import RecommendationEngine
from analytics.models import AIRecommendation
from django.contrib.auth import get_user_model

User = get_user_model()

def main():
    print("ü§ñ G√©n√©ration de recommandations IA...\n")
    
    # R√©cup√©rer le premier utilisateur
    try:
        user = User.objects.first()
        if not user:
            print("‚ùå Aucun utilisateur trouv√©. Cr√©ez un utilisateur d'abord.")
            return
        
        print(f"üë§ Utilisateur: {user.username}")
    except Exception as e:
        print(f"‚ùå Erreur lors de la r√©cup√©ration de l'utilisateur: {e}")
        return
    
    # Cr√©er le moteur de recommandations
    print("\nüîÑ Initialisation du moteur IA...")
    engine = RecommendationEngine(user=user)
    
    # G√©n√©rer les recommandations
    try:
        print("üß† Analyse en cours...\n")
        recommendations = engine.analyze_and_recommend()
        print(f"‚úÖ {len(recommendations)} recommandations g√©n√©r√©es\n")
        
        if not recommendations:
            print("‚ÑπÔ∏è Aucune recommandation g√©n√©r√©e. Cela peut √™tre normal si :")
            print("   - Il n'y a pas assez de d√©tections")
            print("   - Toutes les alertes sont d√©j√† trait√©es")
            print("   - Le syst√®me ne d√©tecte pas d'anomalies")
            return
        
        # Afficher les recommandations
        print("=" * 80)
        for i, rec in enumerate(recommendations, 1):
            priority_icon = "üî¥" if rec['priority'] == 5 else "üü†" if rec['priority'] == 4 else "üü°" if rec['priority'] == 3 else "üü¢"
            print(f"\n{priority_icon} {i}. [{rec['type'].upper()}] {rec['title']}")
            print(f"   Priorit√©: {rec['priority']}/5 | Confiance: {rec['confidence']:.0%} | Impact: {rec['impact']}")
            print(f"   üìù {rec['description']}")
            print(f"   üí° Action: {rec['action']}")
        
        print("\n" + "=" * 80)
        
        # Sauvegarder les recommandations de haute priorit√©
        saved_count = 0
        for rec in recommendations:
            if rec['priority'] >= 3:  # Priorit√© moyenne ou plus
                try:
                    ai_rec = AIRecommendation.objects.create(
                        user=user,
                        recommendation_type=rec['type'],
                        title=rec['title'],
                        description=rec['description'],
                        action=rec['action'],
                        priority=rec['priority'],
                        confidence=rec['confidence'],
                        impact=rec['impact'],
                        metadata=rec.get('context', {}),
                        status='pending'
                    )
                    saved_count += 1
                    print(f"üíæ Sauvegard√©: {ai_rec.title} (ID: {ai_rec.id})")
                except Exception as e:
                    print(f"‚ö†Ô∏è Erreur lors de la sauvegarde: {e}")
        
        print(f"\n‚úÖ {saved_count}/{len(recommendations)} recommandations sauvegard√©es en base de donn√©es")
        print(f"\nüåê Acc√©dez au dashboard IA: http://localhost:8000/analytics/ai-dashboard/")
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la g√©n√©ration: {e}")
        import traceback
        traceback.print_exc()

if __name__ == '__main__':
    main()
